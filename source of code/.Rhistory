ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(data = filter(mpg, class == "subcompact"), se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
+     geom_point(data = filter(mpg, class == "subcompact"))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(data = filter(mpg, class == "subcompact"))
diamonds
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar(alpha = 1/5)
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
+     geom_bar(alpha = 1/5, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
+     geom_bar(alpha = 1/5)
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar(alpha = 1/5)
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +      geom_bar(alpha = 1/5, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +      geom_bar(alpha = 1/5, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +     geom_bar(alpha = 1/5)
library(nycflights13)
library(tidyverse)
flight
flights
by_day <- group_by(flights, year, month, day)
by_day
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
mtcars
ggplot(mtcars) + geom_point(aes(x = wt, y = mpg))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
library(nycflights13)
library(tidyverse)
ggplot()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
source("~/.active-rstudio-document")
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
flights
library(nycflights13)
library(tidyverse)
flights
by_day <- group_by(flights, year, month, day)
by_day
ggplot(data = faithful, mapping = aes(x = eruptions)) +
geom_histogram(binwidth = 0.25)
gfg <- list(2, 4, 5, 6, 7, 9, 13, 15, 3, 1)
str(gfg)
gfg <- list(2, 4, 5)
str(gfg)
read_csv("a,b,c
1,2,3
4,5,6")
library(tidyverse)
read_cvs("a,b,c")
read_cvs("a,b,c
1,2,3
4,5,6")
read_csv("a,b,c
1,2,3
4,5,6")
getwd
getwd()
library(readxl)
TestData <- read_excel("RProject/TestData.xlsx")
View(TestData)
library(nycflights13)
library(tidyverse)
filter(flights, month == 1)
filter(flights, month == 1, day == 1)
filter(flights, month == 11 | month == 12)
nov_dec <- filter(flights, month %in% c(11, 12))
filter(flights, month %in% c(11, 12))
library(readr)
WordCloud <- read_csv("OneDrive/Grinnell/2022 Spring/CSC-324/week3/WordCloud.xlsx")
View(WordCloud)
View(WordCloud)
WordCloud <- read.table("~/OneDrive/Grinnell/2022 Spring/CSC-324/week3/WordCloud.xlsx", header=TRUE, quote="\"")
View(WordCloud)
View(WordCloud)
View(WordCloud)
View(WordCloud)
View(WordCloud)
library(readxl)
WordCloud <- read_excel("OneDrive/Grinnell/2022 Spring/CSC-324/week3/WordCloud.xlsx")
View(WordCloud)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
library(qrcode)
install.packages("qrcode")
library(qrcode)
qrcode_gen('https://www.instagram.com/frzno1/', bColor = "white", wColor = "blue")
library(fortunes)
fortunes()
install.packages("fortunes")
fortunes::fortune()
fortune()
fortunes()
fortunes::fortune()
fortunes::fortune()
fortunes::fortune()
fortunes::fortune("divide")
fortunes::fortune("Yoda")
fortunes::fortune("Yoda")
fortunes::fortune(author = "Yoda")
fortunes::fortune(author = "Yoda")
fortunes::fortune(author = "Yoda") print(colors)
fortunes::fortune(author = "Yoda")
+ print(colors())
fortunes::fortune(author = "Yoda", colors)
fortunes::fortune(author = "Yoda", color = "red")
install.packages("cowsay")
say(what = "fortune(author = "Yoda")")
say(what = fortunes::fortune(author = "Yoda", color = "red"))
say(what = "fortune")
install.packages("cowsay")
say()
cowsay::say(what = "fortune")
cowsay::say(what = "fortune(author = "Yoda")")
cowsay::say(what = "fortune", author = "Yoda")
cowsay::say(what = "fortune", author = "Yoda", color = "bule")
cowsay::say(what = "fortune", author = "Yoda", colors)
cowsay::say(what = "fortune", author = "Yoda")
runExample("01_hello")
library(shiny)
shinyApp(ui = ui, server = server)
install.packages("shiny")
library(shiny)
runExample("01_hello")
run("Odka")
runApp("Odka")
runApp("Odka")
traffic_violaions <- read.csv("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/traffic_violaions.csv")
View(traffic_violaions)
Main <- read.csv("traffic_violations.csv")
Main <- read.csv("traffic_violations.csv")
ls
getwd
getwd()
source("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/Main.R")
source("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/Main.R")
source("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/Main.R")
source("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/Main.R")
source("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/Main.R")
source("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/Main.R")
source("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/Main.R")
source("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/Main.R")
Main <- read.csv("traffic_violations.csv")
read.csv("traffic_violations.csv")
Main <- read.csv("traffic_violations.csv")
Main <- read.csv("traffic_violations.csv")
ggplot(data = Main) + stat_count(mapping = aes(x = driver_age))
Main <- read.csv("traffic_violations.csv")
source("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/Main.R")
Main <- read.csv("traffic_violaions.csv")
main <- read.csv("traffic_violaions.csv")
main <- read.csv("traffic_violaions.csv")
source("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/Main.R")
library(shiny)
main <- read.csv("traffic_violaions.csv")
source("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/Main.R")
traffic_violaions
View(traffic_violaions)
ggplot(data = traffic_violaions) + stat_count(mapping = aes(x = driver_age))
library(tidyverse)
ggplot(data = traffic_violaions) + stat_count(mapping = aes(x = driver_age))
library(shiny)
library(tidyverse)
ggplot(data = traffic_violaions) + stat_count(mapping = aes(x = driver_age))
ggplot(data = traffic_violaions) +
stat_count(mapping = aes(x = driver_age)ï¼Œna.rm = True)
ggplot(data = traffic_violaions) + stat_count(mapping = aes(x = driver_age), na.rm = True)
ggplot(data = traffic_violaions) + stat_count(mapping = aes(x = driver_age), na.rm = TRUE)
ggplot(data = traffic_violaions) +
stat_count(mapping = aes(x = driver_age), na.rm = TRUE)
ggplot(data = traffic_violaions) +
geom_histogram(mapping = aes(x = driver_age), na.rm = TRUE, binwidth = 5)
ggplot(data = traffic_violaions) +
geom_histogram(mapping = aes(x = driver_age), na.rm = TRUE, binwidth = 10)
ggplot(data = traffic_violaions) +
geom_histogram(mapping = aes(x = driver_race), na.rm = TRUE, binwidth = 10)
ggplot(data = traffic_violaions) +
geom_histogram(mapping = aes(x = driver_race), na.rm = TRUE)
ggplot(data = traffic_violaions) +
geom_histogram(mapping = aes(x = driver_race), na.rm = TRUE)
ggplot(data = traffic_violaions) +
stat_count(mapping = aes(x = driver_race), na.rm = TRUE)
library(cowsey)
install.packages(cowsey)
install.packages(cowsay)
install.packages("cowsay")
cowsay?
end
?cowsaay
?cowsay
?say
say(what = "fortune", by = "yoda", what_color="blue", by_color = "yellow")
library(cowsay)
cowsay::say(what = "fortune", by = "yoda", what_color="blue", by_color = "yellow")
cowsay::say(what = "fortune", by = "yoda", what_color="red", by_color = "purple")
cowsay::say(what = "Q&A", by = "cat", what_color="red", by_color = "purple")
> cowsay::say(what = "Q: How is this semester going? \n A: Pretty good!", by = "cat", what_color="red", by_color = "red")
cowsay::say(what = "Q: How is this semester going? \n A: Pretty good!", by = "cat", what_color="red", by_color = "red")
cowsay::say(what = "Q: How is this semester going? \nA: Pretty good!", by = "cat", what_color="red", by_color = "red")
cowsay::say(what = paste0(" Eyes Beat Memory: Using our eyes to switch between different views that are visible simultaneously has much lower ", crayon::yellow("cognitive load "), "than consulting our memory to compare a current view with what was seen before. Many interaction idioms implicitly rely on the internal use of mem- ory and thus impose cognitive load on the viewer. Consider navigation within a single view, where the display changes to show the scene from a different viewpoint. Maintaining a sense of orientation implicitly relies on using "))
cowsay::say(what = paste0("Tamara Munzner described the "Responsiveness is Required" \nThe latency of interaction, namely, how much time it takes for the system to respond to the user action, matters immensely for inter- action design. Our reaction to latency does not simply occur on a continuum, where our irritation level gradually rises as things take longer and longer. Human reaction to phenomena is best modeled in terms of a series of discrete categories, with a different time constant associated with each one. A system will feel responsive if these latency classes are taken into account by providing feedback to the user within the relevant time scale. The three categories most relevant for vis designers are shown in Table 6.1."))
cowsay::say(what = paste0("Tamara Munzner described the \"Responsiveness is Required\" \nThe latency of interaction, namely, how much time it takes for the system to respond to the user action, matters immensely for inter- action design. Our reaction to latency does not simply occur on a continuum, where our irritation level gradually rises as things take longer and longer. Human reaction to phenomena is best modeled in terms of a series of discrete categories, with a different time constant associated with each one. A system will feel responsive if these latency classes are taken into account by providing feedback to the user within the relevant time scale. The three categories most relevant for vis designers are shown in Table 6.1."))
cowsay::say(what = paste0("Tamara Munzner described the \"Responsiveness is Required\" \nThe ", crayon:: yellow("latency "), "of interaction, namely, how much time it takes for the system to respond to the user action, matters immensely for inter- action design. Our reaction to latency does not simply occur on a continuum, where our irritation level gradually rises as things take longer and longer. Human reaction to phenomena is best modeled in terms of a series of discrete categories, with a different time constant associated with each one. A system will feel responsive if these latency classes are taken into account by providing feedback to the user within the relevant time scale. The three categories most relevant for vis designers are shown in Table 6.1."))
cowsay::say(what = paste0("Tamara Munzner described the \"Responsiveness is Required\" \nThe ", crayon:: yellow("latency "), "of interaction, " crayon:: yellow("namely, how much time it takes for the system to respond to the user action "), ", matters immensely for inter- action design. Our reaction to latency does not simply occur on a " crayon:: yellow("continuum"), ", where our irritation level gradually rises as things take longer and longer. Human reaction to phenomena is best modeled in terms of " crayon:: yellow("a series of discrete categories"), ", with a different time constant associated with each one. A system will feel " crayon:: yellow("responsive"), " if these latency classes are taken into account by " crayon:: yellow("providing feedback"), " to the user within the relevant time scale. The three categories most relevant for vis designers are shown in Table 6.1."))
cowsay::say(what = paste0("Tamara Munzner described the \"Responsiveness is Required\" \nThe ", crayon:: yellow("latency "), "of interaction, ", crayon:: yellow("namely, how much time it takes for the system to respond to the user action "), ", matters immensely for inter- action design. Our reaction to latency does not simply occur on a ", crayon:: yellow("continuum"), ", where our irritation level gradually rises as things take longer and longer. Human reaction to phenomena is best modeled in terms of ", crayon:: yellow("a series of discrete categories"), ", with a different time constant associated with each one. A system will feel ", crayon:: yellow("responsive"), " if these latency classes are taken into account by ", crayon:: yellow("providing feedback"), " to the user within the relevant time scale. The three categories most relevant for vis designers are shown in Table 6.1."))
> cowsay::say(what = paste0("Tamara Munzner described the \"Responsiveness is Required\" \nThe ", crayon:: yellow("latency "), "of interaction, ", crayon:: yellow("namely, how much time it takes for the system to respond to the user action "), ", matters immensely for inter- action design. Our reaction to latency does not simply occur on a ", crayon:: yellow("continuum"), ", where our irritation level gradually rises as things take longer and longer. Human reaction to phenomena is best modeled in terms of ", crayon:: yellow("a series of discrete categories"), ", with a different time constant associated with each one. A system will feel ", crayon:: yellow("responsive"), " if these latency classes are taken into account by ", crayon:: yellow("providing feedback"), " to the user within the relevant time scale. The three categories most relevant for vis designers are shown in Table 6.1.\(Munzner, 137\)"))
cowsay::say(what = paste0("Tamara Munzner described the \"Responsiveness is Required\" \nThe ", crayon:: yellow("latency "), "of interaction, ", crayon:: yellow("namely, how much time it takes for the system to respond to the user action "), ", matters immensely for inter- action design. Our reaction to latency does not simply occur on a ", crayon:: yellow("continuum"), ", where our irritation level gradually rises as things take longer and longer. Human reaction to phenomena is best modeled in terms of ", crayon:: yellow("a series of discrete categories"), ", with a different time constant associated with each one. A system will feel ", crayon:: yellow("responsive"), " if these latency classes are taken into account by ", crayon:: yellow("providing feedback"), " to the user within the relevant time scale. The three categories most relevant for vis designers are shown in Table 6.1.\(Munzner, 137\)"))
cowsay::say(what = paste0("Tamara Munzner described the \"Responsiveness is Required\" \nThe ", crayon:: yellow("latency "), "of interaction, ", crayon:: yellow("namely, how much time it takes for the system to respond to the user action "), ", matters immensely for inter- action design. Our reaction to latency does not simply occur on a ", crayon:: yellow("continuum"), ", where our irritation level gradually rises as things take longer and longer. Human reaction to phenomena is best modeled in terms of ", crayon:: yellow("a series of discrete categories"), ", with a different time constant associated with each one. A system will feel ", crayon:: yellow("responsive"), " if these latency classes are taken into account by ", crayon:: yellow("providing feedback"), " to the user within the relevant time scale. The three categories most relevant for vis designers are shown in Table 6.1.(Munzner, 137)"))
cowsay::say(what = paste0("Tamara Munzner described the \"Responsiveness is Required\" \nThe ", crayon:: yellow("latency "), "of interaction, namely,", crayon:: yellow(" how much time it takes for the system to respond to the user action "), ", matters immensely for inter- action design. Our reaction to latency does not simply occur on a ", crayon:: yellow("continuum"), ", where our irritation level gradually rises as things take longer and longer. Human reaction to phenomena is best modeled in terms of ", crayon:: yellow("a series of discrete categories"), ", with a different time constant associated with each one. A system will feel ", crayon:: yellow("responsive"), " if these latency classes are taken into account by ", crayon:: yellow("providing feedback"), " to the user within the relevant time scale. The three categories most relevant for vis designers are shown in Table 6.1.(Munzner, 137)\n\n", crayon:: black("Visualization Analysis & Design, Tamara Munzner, 2014, Taylor & Francis Groups, New York")), by = "tiger")
cowsay::say(what = paste0("Tamara Munzner described the \"Responsiveness is Required\" \nThe ", crayon:: yellow("latency "), "of interaction, namely,", crayon:: yellow(" how much time it takes for the system to respond to the user action "), ", matters immensely for inter- action design. Our reaction to latency does not simply occur on a ", crayon:: yellow("continuum"), ", where our irritation level gradually rises as things take longer and longer. Human reaction to phenomena is best modeled in terms of ", crayon:: yellow("a series of discrete categories"), ", with a different time constant associated with each one. A system will feel ", crayon:: yellow("responsive"), " if these latency classes are taken into account by ", crayon:: yellow("providing feedback"), " to the user within the relevant time scale. The three categories most relevant for vis designers are shown in Table 6.1.(Munzner, 137)\n\n", crayon:: black("Visualization Analysis & Design, Tamara Munzner, 2014, Taylor & Francis Groups, New York")), by = "chicken")
cowsay::say(what = paste0("Tamara Munzner described the \"Responsiveness is Required\:" \nThe ", crayon:: yellow("latency "), "of interaction, namely,", crayon:: yellow(" how much time it takes for the system to respond to the user action "), ", matters immensely for inter- action design. Our reaction to latency does not simply occur on a ", crayon:: yellow("continuum"), ", where our irritation level gradually rises as things take longer and longer. Human reaction to phenomena is best modeled in terms of ", crayon:: yellow("a series of discrete categories"), ", with a different time constant associated with each one. A system will feel ", crayon:: yellow("responsive"), " if these latency classes are taken into account by ", crayon:: yellow("providing feedback"), " to the user within the relevant time scale. The three categories most relevant for vis designers are shown in Table 6.1.(Munzner, 137)\n\n", crayon:: black("Reference: \nVisualization Analysis & Design, Tamara Munzner, 2014, Taylor & Francis Groups, New York")), by = "chicken")
cowsay::say(what = paste0("Tamara Munzner described the \"Responsiveness is Required\": \nThe ", crayon:: yellow("latency "), "of interaction, namely,", crayon:: yellow(" how much time it takes for the system to respond to the user action "), ", matters immensely for inter- action design. Our reaction to latency does not simply occur on a ", crayon:: yellow("continuum"), ", where our irritation level gradually rises as things take longer and longer. Human reaction to phenomena is best modeled in terms of ", crayon:: yellow("a series of discrete categories"), ", with a different time constant associated with each one. A system will feel ", crayon:: yellow("responsive"), " if these latency classes are taken into account by ", crayon:: yellow("providing feedback"), " to the user within the relevant time scale. The three categories most relevant for vis designers are shown in Table 6.1.(Munzner, 137)\n\n", crayon:: black("Reference: \nVisualization Analysis & Design, Tamara Munzner, 2014, Taylor & Francis Groups, New York")), by = "chicken")
cowsay::say(what = paste0("Tamara Munzner described the \"Responsiveness is Required\": \nThe ", crayon:: purple("latency "), "of interaction, namely,", crayon:: purple(" how much time it takes for the system to respond to the user action "), ", matters immensely for inter- action design. Our reaction to latency does not simply occur on a ", crayon:: purple("continuum"), ", where our irritation level gradually rises as things take longer and longer. Human reaction to phenomena is best modeled in terms of ", crayon:: purple("a series of discrete categories"), ", with a different time constant associated with each one. A system will feel ", crayon:: purple("responsive"), " if these latency classes are taken into account by ", crayon:: purple("providing feedback"), " to the user within the relevant time scale. The three categories most relevant for vis designers are shown in Table 6.1.(Munzner, 137)\n\n", crayon:: black("Reference: \nVisualization Analysis & Design, Tamara Munzner, 2014, Taylor & Francis Groups, New York")), by = "chicken")
shiny::runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
library(readxl)
driver_ages <- read_excel("OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/driver_ages.xlsx")
View(driver_ages)
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
shiny::runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
shiny::runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
tab2_data <- traffic_violaions %>%
mutate(MySpecificBins = cut(driver_age, breaks = c(-Inf, 20,25,30,35,40,45,50,55,60,65,70,75,80,85,Inf)))
tab2_data <- tab2_data %>%
group_by(MySpecificBins) %>%
count() %>%
na.omit()
view(tab2_data)
driver_ages %>%
inner_join(tab2_data, by = "MySpecificBins")
driver_ages %>%inner_join(tab2_data, by = "MySpecificBins")
driver_ages %>%
inner_join(tab2_data, by = "AGE")
inner_join(driver_ages, tab2_data, by = AGE)
inner_join(driver_ages, tab2_data, by = "AGE")
inner_join(driver_ages, tab2_data, by = "MySpecificBins")
driver_ages %>%
inner_join(tab2_data)
?cbind
tmp_data <- data.frame(total = c(5859,10677,7579,5436,4864,4547,3921,2933,1813,1017,410,176,70,18,8))
view(tmp_data)
driver_ages <- cbind(driver_ages, tmp_data)
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp()
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp()
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp()
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp()
runApp()
runApp()
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
driver_ages_last <- cbind(driver_ages, tmp_data)
view(driver_ages_last)
driver_ages_part4$expect_total <- driver_ages_part4$Percentage * driver_ages_part4$total / 100
driver_ages_part4 <- cbind(driver_ages, tmp_data)
driver_ages_part4$expect_total <- driver_ages_part4$Percentage * driver_ages_part4$total / 100
view(driver_ages_part4)
driver_ages_last <- driver_ages_part4
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
driver_ages_last$expect_total <- driver_ages_last$Percentage * driver_ages_last$total / 100
driver_ages_last %>%
filter(driver_ages_last$expect_total > 10)
filter(driver_ages_last, expect_total  >10)
driver_ages_last2 <- filter(driver_ages_last, expect_total  >10)
filter(driver_ages, total > 100)
shiny::runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp()
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp()
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp()
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
driver_ages_last <- cbind(driver_ages, tmp_data)
driver_ages_last$expect_total <- driver_ages_last$Percentage * driver_ages_last$total / 100
view(driver_ages_last)
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
driver_ages_last <- driver_ages[-4]
view(driver_ages_last)
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
driver_ages_last <- cbind(driver_ages, tmp_data)
driver_ages_last$expect_total <- driver_ages_last$Percentage * driver_ages_last$total / 100
driver_ages_last <- driver_ages[,-4]
view(driver_ages_last)
driver_ages_last <- cbind(driver_ages, tmp_data)
driver_ages_last$expect_total <- driver_ages_last$Percentage * driver_ages_last$total / 100
view(driver_ages_last)
driver_ages_last <- driver_ages_last[,-4]
view(driver_ages_last)
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
driver_ages_last <- filter(driver_ages_last, driver_ages_last$expect_total > 10)
view(driver_ages_last)
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
shiny::runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
typeof(list(1,2,3.5))
typeof("aaaaaaa")
typeof(2,3.5)
typeof(2.5,3.5)
1:10
typeof(1:10)
typeof(vector(1.5, 2.5))
typeof(1:7.5)
?vector
typeof(c(1.5,2.5,3.5))
typeof(c(list(1), list(2)))
?c
length(list(1, 2, 3))
length("xxaacc")
length(c("xxyyzz"))
length(1:20)
length(c(list(1), list(2)))
shiny::runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
library(readxl)
driver_races <- read_excel("driver_races.xlsx")
View(driver_races)
runApp()
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
library(readxl)
driver_races <- read_excel("driver_races.xlsx")
View(driver_races)
dd
library(readxl)
driver_races <- read_excel("OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/driver_races.xlsx")
View(driver_races)
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp()
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
tab2_data <- traffic_violaions %>%
mutate(MySpecificBins = cut(driver_age, breaks = c(-Inf, 20,25,30,35,40,45,50,55,60,65,70,75,80,85,Inf)))
view(tab2_data)
tab2_data <- tab2_data %>%
group_by(MySpecificBins) %>%
count() %>%
na.omit()
view(tab2_data)
tmp_data <- data.frame(total = c(5859,10677,7579,5436,4864,4547,3921,2933,1813,1017,410,176,70,18,8))
driver_ages_part4 <- cbind(driver_ages, tmp_data)
view(driver_ages_part4)
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
1/3 * 3 == 3
near(1/3*3, 3)
1/3 * 3 == 1
1/77*77 == 1
sqrt(5) ^ 5 == 5
near(sqrt(5)^5, 5)
near(sqrt(5)^2, 5)
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
tmp_data <- data.frame(total = c(5859,10677,7579,5436,4864,4547,3921,2933,1813,1017,410,176,70,18,8))
driver_ages_last <- cbind(driver_ages, tmp_data)
view(driver_ages_last)
driver_ages_last$expect_expect_percentage <- driver_ages_last$total / driver_ages_last$NUMBER * 100
driver_ages_last <- driver_ages_last[,-4]
view(driver_ages_last)
driver_ages_last <- filter(driver_ages_last, driver_ages_last$expect_percentage > 0.0015)
view(driver_ages_last)
driver_ages_last <- cbind(driver_ages, tmp_data)
driver_ages_last$expect_percentage <- driver_ages_last$total / driver_ages_last$NUMBER * 100
driver_ages_last <- driver_ages_last[,-4]
driver_ages_last <- filter(driver_ages_last, driver_ages_last$expect_percentage > 0.0015)
view(driver_ages_last)
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
view(driver_races)
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
tab3_tmp_data <- data.frame(violation = c(1375, 6594,4099,149,37364))
driver_races <- cbind(driver_races, tab3_tmp_data)
view(driver_races)
driver_races$expected_percentage <- driver_races$violation / driver_races$car_access * 100
driver_races$total_population <- driver_races$without_car / driver_races$without_percentage * 100
driver_races$car_access <- driver_races$total_population / (100 - driver_races$without_percentage) * 100
view(driver_races)
driver_races$expected_percentage <- driver_races$violation / driver_races$car_access * 100
view(driver_races)
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
shiny::runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
view(traffic_violaions)
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
?barplot
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
?pie
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
shiny::runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
runApp('OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
traffic_violaions <- read.csv("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/traffic_violaions.csv")
View(traffic_violaions)
driver_races <- read.csv("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/driver_races.csv")
View(driver_races)
driver_ages <- read.csv("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/driver_ages.csv")
View(driver_ages)
runApp()
runApp()
runApp()
runApp()
traffic_violaions <- read.csv("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/traffic_violaions.csv")
View(traffic_violaions)
driver_races <- read.csv("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/driver_races.csv")
View(driver_races)
driver_ages <- read.csv("~/OneDrive/Grinnell/2022 Spring/CSC-324/IndividualProjects/Individual-Project/Rspace/driver_ages.csv")
View(driver_ages)
runApp()
library(shiny); runApp('app(code).R')
shiny::runApp()
runApp('~/Downloads/SewolFinall')
runApp('~/Downloads/SewolFinall')
runApp('~/Downloads/SewolFinall')
shiny::runApp()
shiny::runApp()
